{"version":3,"sources":["game.js","components/Title.js","components/Turn.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["board","Title","className","Turn","player","message","isOver","noStones","slice","every","n","sum","a","b","findWinner","totalPlayer1","getHomeIndex","totalPlayer2","playerTotalInPlay","reduce","clearStones","map","i","Board","clickHandler","boardWithIndexes","count","index","player1Holes","player2Holes","player1Home","player2Home","reverse","hole","key","onClick","initialState","Array","fill","App","state","Object","assign","bind","resetHandler","this","setState","moveIndex","newState","Math","floor","otherPlayer","playerHomeIndex","otherPlayerHomeIndex","numStones","newBoard","currIndex","otherPlayerTotal","playerTotal","belongsTo","oppositeIndex","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5b65c0d1.chunk.js","sourcesContent":["const NUM_HOLES = 6\nconst advance = index => ((index +1)% (2 * NUM_HOLES + 2 ))\nconst noStones = board => player => {\n    return board.slice(player * 6, player * 6 + 6).every(n => n === 0)\n  }\n\n  const emptyHomes = board => {\n    return board.map((n, i) => ((i + 1) % 7 === 0 ? 0 : n))\n  }\n  const sum = (a, b) =>a + b\n\n  const findWinner = board => {\n    const totalPlayer1 = board[getHomeIndex(0)]\n    const totalPlayer2 = board[getHomeIndex(1)]\nreturn totalPlayer1 > totalPlayer2 ? 'The winner of the game is Player 2!' : totalPlayer2 > totalPlayer1 ? 'The winner of the game is Player 1!' : 'Draw! '\n  }\n  const getHomeIndex = player => player * 7 + 6\n  const playerTotalInPlay = board => player => {\n      return board.slice(player * 6, player * 6 + 6).reduce(sum)\n  }\nconst clearStones = board => {\n    return board.map((n, i) => ((i + 1) % 7 === 0 ? n: 0))\n}\n\nconst belongsTo = player => index => {\n    return index > player * 6 && index <= player * 6 + 6\n}\n\nconst makeMove = moveIndex => ({player, board, isOver}) => {\n    if ((moveIndex + 1) % 7 === 0){\n        return {message: 'bad move'}\n    }\n    if (Math.floor(moveIndex / 7) !== player){\n        return {message: 'wrong player'}\n    } \n    if (!board[moveIndex] || isOver){\n        return { message: 'no stones!'}\n    }\n    const otherPlayer = 1 - player\n\nconst playerHomeIndex = getHomeIndex(player)\nconst otherPlayerHomeIndex = getHomeIndex(otherPlayer)\n\nlet numStones = board[moveIndex]\n//remove the stones from the hole at moveIndex\nlet newBoard = board = board.slice().map((n, i ) => i ===moveIndex ? 0 : n)\n//and advance the currIndex\nlet currIndex = moveIndex\n\n//repeteadly advance the index and drop a stone\nwhile (numStones > 0) {\n    currIndex = advance(currIndex)\n    numStones = numStones - 1\n    newBoard[currIndex] = newBoard[currIndex] + 1\n}\n//no stones left\nif (noStones (newBoard)(player)){\n    //move stones to otherPlayer's pot\n    const otherPlayerTotal = playerTotalInPlay(otherPlayer)\n    newBoard[playerHomeIndex] = newBoard[playerHomeIndex]+otherPlayerTotal\n    newBoard = clearStones(newBoard)\n    return {\n        board: newBoard,\n        isOver: true,\n        message:''\n    }\n}\nif (noStones(newBoard)(otherPlayer)) {\n    //move stones to otherPlayer's pot\n    const playerTotal = playerTotalInPlay(player)\n    newBoard[otherPlayerHomeIndex] = newBoard[otherPlayerHomeIndex] + playerTotal\n    newBoard = clearStones(newBoard)\n    return {\n        board: newBoard,\n        isOver: true,\n        message: findWinner(newBoard)\n    }\n}\n//if final stone was in players home\nif (currIndex === playerHomeIndex){\n    return {\n        board: newBoard,\n        message: ''\n    }\n}\n\n//if final stone in player's empty hole\nif (belongsTo(player)(currIndex) && newBoard[currIndex] === 1){\n    const oppositeIndex = 12 - currIndex\n    newBoard[playerHomeIndex] = newBoard[playerHomeIndex] + newBoard[oppositeIndex] + 1\n    newBoard[currIndex] = 0\n    newBoard[oppositeIndex] = 0\n    return {\n        newBoard: newBoard,\n        player: otherPlayer,\n        message: ''\n    }\n}\n\n//else nothing special\nreturn{\n    board: newBoard,\n    player: otherPlayer,\n    message: ''\n}\n}\nexport {makeMove, emptyHomes}\n","import React from 'react';\n\nconst Title = () => (\n    <header className=\"App-header\">\n<h1 className=\"App-title\">Samburinga Game</h1>\n</header>\n)\n    \n\nexport default Title;","import React from 'react';\n\nconst Turn = ({player, isOver, message}) => {\n    return(\n    <div>\n        <div>\n            Player {player +1}'s turn!\n        </div>\n        <div>\n            {message}\n        </div>\n    </div>\n    )\n}\n    \n\nexport default Turn;","import React from 'react';\n\nconst Board = ({board, clickHandler}) => {\n    const boardWithIndexes = board.map((n, i) => ({count: n, index: i}))\n\nconst player1Holes = boardWithIndexes.slice(0, 6)\nconst player2Holes = boardWithIndexes.slice(7, 13)\n\nconst player1Home = board[6]\nconst player2Home = board[13]\n\nreturn(\n    <div className=\"board\">\n    <div className=\"home\">\n    {player2Home}\n\n    </div>\n\n<div className=\"holes-section\">\n<div className=\"holes-container\">\n{player2Holes.reverse().map((hole, i) =>(\n    <div className=\"hole\" key={i} onClick={() => clickHandler(hole.index)}>\n    {hole.count}\n\n</div>\n))}\n\n</div>\n<div className=\"holes-container\">\n{player1Holes.map((hole, i) =>(\n    <div className=\"hole\" key={i} onClick={() => clickHandler(hole.index)}>\n    {hole.count}\n    </div>\n))}\n\n</div>\n    </div>\n    <div className=\"home\">\n    {player1Home}\n\n    </div>\n    </div>\n    )\n}\n    \n\nexport default Board;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Title from \"./components/Title\";\nimport Turn from \"./components/Turn\";\nimport { makeMove, emptyHomes } from \"./game\";\nimport Board from \"./components/Board\";\n\nconst START_AMOUNT = 4;\n\nconst initialState = {\n  player: 0,\n  board: emptyHomes(Array(14).fill(START_AMOUNT)),\n  isOver: false,\n  message: \"\",\n};\nclass App extends Component() {\n  constructor() {\n    super();\n    this.state = Object.assign({}, initialState);\n    this.clickHandler = this.clickHandler.bind(this);\n    this.resetHandler = this.resetHandler.bind(this);\n  }\n  resetHandler() {\n    this.setState(initialState);\n  }\n  clickHandler(i) {\n    const newState = makeMove(i)(this.state);\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Title />\n        <Turn />\n        player = {this.state.player}\n        isOver={this.state.isOver}\n        message={this.state.message}\n        <Board board={this.state.board} clickHandler={this.clickHandler} />\n        <button onClick={this.resetHandler}>Reset</button>{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}